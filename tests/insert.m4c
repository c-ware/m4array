/*
 * Testing of the insert operation.
*/

#include "common.h"

include(template/common.m4)

void test_insert() {
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *e = (char *) malloc(16);
    char *f = (char *) malloc(16);

    /* Initialize strings */
    strcpy(a, "foo"); 
    strcpy(b, "bar"); 
    strcpy(c, "baz"); 
    strcpy(d, "tuna"); 
    strcpy(e, "spam"); 
    strcpy(f, "thud"); 

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    /* Cannot insert into an empty array */
    M4ARRAY_APPEND(array, a, STRING_ARRAY);

    M4ARRAY_INSERT(array, b, 0, STRING_ARRAY);
    ASSERT_NUMEQ(array->length, 2);
    ASSERT_NUMEQ(array->used, 2);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_STREQ(array->contents[0], "bar");
    ASSERT_STREQ(array->contents[1], "foo");

    M4ARRAY_INSERT(array, c, 0, STRING_ARRAY);
    ASSERT_NUMEQ(array->length, 3);
    ASSERT_NUMEQ(array->used, 3);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_STREQ(array->contents[0], "baz");
    ASSERT_STREQ(array->contents[1], "bar");
    ASSERT_STREQ(array->contents[2], "foo");

    M4ARRAY_FREE(array, STRING_ARRAY);
}

void test_resize() {
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *e = (char *) malloc(16);
    char *f = (char *) malloc(16);

    /* Initialize strings */
    strcpy(a, "foo"); 
    strcpy(b, "bar"); 
    strcpy(c, "baz"); 
    strcpy(d, "tuna"); 
    strcpy(e, "spam"); 
    strcpy(f, "thud"); 

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    /* Cannot insert into an empty array */
    M4ARRAY_APPEND(array, a, STRING_ARRAY);

    M4ARRAY_INSERT(array, b, 0, STRING_ARRAY);
    M4ARRAY_INSERT(array, c, 0, STRING_ARRAY);

    /* Should trigger a resize */
    M4ARRAY_INSERT(array, d, 1, STRING_ARRAY);
    ASSERT_NUMEQ(array->length, 4);
    ASSERT_NUMEQ(array->used, 4);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_STREQ(array->contents[0], "baz");
    ASSERT_STREQ(array->contents[1], "tuna");
    ASSERT_STREQ(array->contents[2], "bar");
    ASSERT_STREQ(array->contents[3], "foo");

    /* Can we insert after a resize? */
    M4ARRAY_INSERT(array, e, 2, STRING_ARRAY);
    ASSERT_NUMEQ(array->length, 5);
    ASSERT_NUMEQ(array->used, 5);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_STREQ(array->contents[0], "baz");
    ASSERT_STREQ(array->contents[1], "tuna");
    ASSERT_STREQ(array->contents[2], "spam");
    ASSERT_STREQ(array->contents[3], "bar");
    ASSERT_STREQ(array->contents[4], "foo");

    M4ARRAY_FREE(array, STRING_ARRAY);
}

void test_reuse() {
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *e = (char *) malloc(16);
    char *f = (char *) malloc(16);

    /* Initialize strings */
    strcpy(a, "foo"); 
    strcpy(b, "bar"); 
    strcpy(c, "baz"); 
    strcpy(d, "tuna"); 
    strcpy(e, "spam"); 
    strcpy(f, "thud"); 

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    M4ARRAY_APPEND(array, a, STRING_ARRAY);
    M4ARRAY_INSERT(array, b, 0, STRING_ARRAY);
    M4ARRAY_INSERT(array, c, 0, STRING_ARRAY);
    M4ARRAY_INSERT(array, d, 1, STRING_ARRAY);
    M4ARRAY_INSERT(array, e, 2, STRING_ARRAY);

    /* Try "replacing" the last element of the array (in this case, foo,
     * which was held in pointer a, with f. */
    array->used = 4;

    M4ARRAY_INSERT(array, f, 2, STRING_ARRAY_RE);
    ASSERT_NUMEQ(array->length, 5);
    ASSERT_NUMEQ(array->used, 5);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_STREQ(array->contents[0], "baz");
    ASSERT_STREQ(array->contents[1], "tuna");
    ASSERT_STREQ(array->contents[2], "thud");
    ASSERT_STREQ(array->contents[3], "spam");
    ASSERT_STREQ(array->contents[4], "bar");

    /* Make sure we replaced the pointer 'a' */
    ASSERT_PTREQ(array->contents[2], a);

    M4ARRAY_FREE(array, STRING_ARRAY);
}

int main() {
    test_insert();
    test_resize();
    test_reuse();

    return 0;
}
