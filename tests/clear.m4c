/*
 * Testing of the clear operation.
*/

#include "common.h"

include(template/common.m4)

void test_clear() {
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *e = (char *) malloc(16);
    char *f = (char *) malloc(16);
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;

    /* Initialize strings */
    strcpy(a, "foo"); 
    strcpy(b, "bar"); 
    strcpy(c, "baz"); 
    strcpy(d, "tuna"); 
    strcpy(e, "spam"); 
    strcpy(f, "thud"); 

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    M4ARRAY_APPEND(array, a, STRING_ARRAY);
    M4ARRAY_APPEND(array, b, STRING_ARRAY);
    M4ARRAY_APPEND(array, c, STRING_ARRAY);
    M4ARRAY_APPEND(array, d, STRING_ARRAY);
    M4ARRAY_APPEND(array, e, STRING_ARRAY);
    M4ARRAY_APPEND(array, f, STRING_ARRAY);

    /* Clear the contents of the array, releasing each string in the process */
    M4ARRAY_CLEAR(array, STRING_ARRAY);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->used, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);

    M4ARRAY_FREE(array, STRING_ARRAY);
}

void test_clear_reuse() {
    char *a = (char *) malloc(16);
    char *b = (char *) malloc(16);
    char *c = (char *) malloc(16);
    char *d = (char *) malloc(16);
    char *e = (char *) malloc(16);
    char *f = (char *) malloc(16);
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;

    /* Initialize strings */
    strcpy(a, "foo"); 
    strcpy(b, "bar"); 
    strcpy(c, "baz"); 
    strcpy(d, "tuna"); 
    strcpy(e, "spam"); 
    strcpy(f, "thud"); 

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    M4ARRAY_APPEND(array, a, STRING_ARRAY);
    M4ARRAY_APPEND(array, b, STRING_ARRAY);
    M4ARRAY_APPEND(array, c, STRING_ARRAY);
    M4ARRAY_APPEND(array, d, STRING_ARRAY);
    M4ARRAY_APPEND(array, e, STRING_ARRAY);
    M4ARRAY_APPEND(array, f, STRING_ARRAY);

    /* Clear the contents of the array, without freeing the elements. */
    M4ARRAY_CLEAR(array, STRING_ARRAY_RE);
    ASSERT_NUMEQ(array->length, 6);
    ASSERT_NUMEQ(array->used, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);

    ASSERT_STREQ(array->contents[0], "foo");
    ASSERT_STREQ(array->contents[1], "bar");
    ASSERT_STREQ(array->contents[2], "baz");
    ASSERT_STREQ(array->contents[3], "tuna");
    ASSERT_STREQ(array->contents[4], "spam");
    ASSERT_STREQ(array->contents[5], "thud");

    M4ARRAY_FREE(array, STRING_ARRAY);
}

int main() {
    test_clear();
    test_clear_reuse();

    return 0;
}
