/*
 * Testing of the resizing functionality of the array.
*/

#include "common.h"

include(template/common.m4)

/* Test to see if the resize happens when it should happen */
void test_when_resize_happens_for_length() {
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    /* Length of 0 should not cause a resize */
    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 0);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* Length of 1 should not cause a resize */
    array->length = 1;
    array->used = 1;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 1);
    ASSERT_NUMEQ(array->length, 1);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* Length of 2 should not cause a resize */
    array->length = 2;
    array->used = 2;

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 2);
    ASSERT_NUMEQ(array->length, 2);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* Length of 3 should cause a resize */
    array->length = 3;
    array->used = 3;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 3);
    ASSERT_NUMEQ(array->length, 3);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH * 2);

    /* Reset the length so we do not try to innapropriately free uninitialized
     * memory */
    array->length = 0;
    array->used = 0;

    M4ARRAY_FREE(array, STRING_ARRAY);
}

/* Test to make sure that the used field does not affect
   when resizes occur */
void test_used_doesnt_cause_resize() {
    struct StringArray *array = (struct StringArray *) CWUTILS_NULL;

    array = M4ARRAY_INIT(array, STRING_ARRAY);

    /* 0 slots use should not cause a resize */
    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 0);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* 1 slot used should not cause a resize */
    array->used = 1;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 1);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* 2 used slots should not cause a resize */
    array->used = 2;

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 2);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* 3 used slots should not cause a resize */
    array->used = 3;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 3);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* 4 used slots should not cause a resize */
    array->used = 4;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 4);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* 5 used slots should not cause a resize */
    array->used = 5;

    __M4ARRAY_RESIZE(array, STRING_ARRAY);

    ASSERT_PTRNEQ(array, CWUTILS_NULL);
    ASSERT_PTRNEQ(array->contents, CWUTILS_NULL);
    ASSERT_NUMEQ(array->used, 5);
    ASSERT_NUMEQ(array->length, 0);
    ASSERT_NUMEQ(array->capacity, M4ARRAY_INITIAL_LENGTH);

    /* OK, I think that is enough. */

    M4ARRAY_FREE(array, STRING_ARRAY);
}

int main() {
    test_when_resize_happens_for_length();
    test_used_doesnt_cause_resize();

    return 0;
}
